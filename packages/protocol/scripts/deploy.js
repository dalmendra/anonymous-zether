const { ethers } = require('hardhat');

const EPOCH_LENGTH = process.env.EPOCH_LENGTH || 6;
const ASSET_ID = process.env.ASSET_ID || 0;


async function main() {
	
  //const [deployer] = await ethers.getSigners();
  
  //Forces the usage of the first account generated by hardhat. If using ganache-cli, please comment the line below.
  const deployer = new ethers.Wallet('0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80', ethers.provider);
  
  //Forces the usage of the first account generated by ganache-cli. If using hardhat, please comment the line below.
  //const deployer = new ethers.Wallet('0x452fda51d25545fec7ddc3be2040f55a3abf413c04d6e2ed9da16ef11ea35808', ethers.provider);
  
  console.log('Deploying contracts with the account:', deployer.address);
  console.log('Deployer private key:', deployer.privateKey);
  
  
  const CashToken = await ethers.getContractFactory('CashToken', deployer);
  const instanceCashToken = await CashToken.deploy(1000);
  await instanceCashToken.deployed();
  console.log('CashToken contract deployed to ', instanceCashToken.address);
  const ownerCashToken = await instanceCashToken.owner();
  console.log('CashToken owner:', ownerCashToken);
  
  const Erc1155Token = await ethers.getContractFactory('Erc1155Token', deployer);
  const instanceErc1155Token = await Erc1155Token.deploy();
  await instanceErc1155Token.deployed();
  console.log('ERC1155Token contract deployed to ', instanceErc1155Token.address);
  const ownerErc1155Token = await instanceErc1155Token.owner();
  console.log('ERC1155Token owner:', ownerErc1155Token);

  const InnerProductVerifier = await ethers.getContractFactory('InnerProductVerifier', deployer);
  const instanceInnerProductVerifier = await InnerProductVerifier.deploy();
  await instanceInnerProductVerifier.deployed();
  console.log('InnerProductVerifier deployed to ', instanceInnerProductVerifier.address);

  const ZetherVerifier = await ethers.getContractFactory('ZetherVerifier', deployer);
  const instanceZetherVerifier = await ZetherVerifier.deploy(instanceInnerProductVerifier.address);
  await instanceZetherVerifier.deployed();
  console.log('ZetherVerifier deployed to ', instanceZetherVerifier.address);

  const BurnVerifier = await ethers.getContractFactory('BurnVerifier', deployer);
  const instanceBurnVerifier = await BurnVerifier.deploy(instanceInnerProductVerifier.address);
  await instanceBurnVerifier.deployed();
  console.log('BurnVerifier deployed to ', instanceBurnVerifier.address);

  const ZSCRestricted = await ethers.getContractFactory('ZSCRestricted', deployer);
  const instanceZSCRestricted = await ZSCRestricted.deploy(instanceCashToken.address, instanceZetherVerifier.address, instanceBurnVerifier.address, EPOCH_LENGTH);
  await instanceZSCRestricted.deployed();
  console.log('ZSCRestricted deployed to ', instanceZSCRestricted.address);
  
  const ZSCERC1155Restricted = await ethers.getContractFactory('ZSCERC1155Restricted', deployer);
  const instanceZSCERC1155Restricted = await ZSCERC1155Restricted.deploy(instanceErc1155Token.address, instanceZetherVerifier.address, instanceBurnVerifier.address, EPOCH_LENGTH, ASSET_ID);
  await instanceZSCERC1155Restricted.deployed();
  console.log('ZSCERC1155Restricted deployed to ', instanceZSCERC1155Restricted.address);
  
  const DvpZSC = await ethers.getContractFactory('DvpZSC', deployer);
  const instanceDvpZSC = await DvpZSC.deploy();
  await instanceDvpZSC.deployed();
  console.log('DvpZSC deployed to ', instanceDvpZSC.address);
}

main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});